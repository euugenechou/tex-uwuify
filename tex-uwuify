#!/usr/bin/env python3

from pylatexenc.latexwalker import LatexWalker, LatexCharsNode, LatexMacroNode
from uwuify import uwu as uwuify
import argparse
import glob
import os
import sys
import shutil


def blacklisted(node):
    blacklist = [
        "crefname",
        "Crefname",
        "tiny",
        "scriptsize",
        "footnotesize",
        "small",
        "normalsize",
        "large",
        "Large",
        "LARGE",
        "huge",
        "HUGE",
        "message",
        "input",
        "usepackage",
        "bibliographystyle",
        "bibliography",
        "documentclass",
        "cite",
        "includegraphics",
        "usetikzlibrary",
        "newglossaryentry",
        "gls",
        "glspl",
        "href",
        "pagenumbering",
        "color",
        "sisetup",
        "addcontentsline",
    ]

    if isinstance(node, LatexMacroNode) and node.macroname in blacklist:
        return True

    return False


def skiptable(node):
    skip = {
        "crefname": 3,
        "Crefname": 3,
        "crefformat": 2,
        "Crefformat": 2,
        "message": 2,
        "bibliographystyle": 2,
        "bibliography": 2,
        "documentclass": 2,
        "cite": 2,
        "includegraphics": 3,
        "usetikzlibrary": 2,
        "newglossaryentry": 3,
        "gls": 2,
        "glspl": 2,
        "href": 3,
        "pagenumbering": 2,
        "color": 2,
        "sisetup": 2,
        "addcontentsline": 3,
    }

    if isinstance(node, LatexMacroNode) and node.macroname in skip:
        return skip[node.macroname]

    return 1


def uwuify_nodes(nodes, offsets, mappings, states):
    i = 0
    while i < len(nodes):
        if not nodes[i]:
            i += 1
            continue

        if not blacklisted(nodes[i]):
            if hasattr(nodes[i], "parsing_state") and \
                    not nodes[i].parsing_state.s in offsets:
                offsets[nodes[i].parsing_state.s] = 0
                mappings[nodes[i].parsing_state.s] = len(states)
                states.append(nodes[i].parsing_state.s)

            if hasattr(nodes[i], "nodeargd") and \
                    hasattr(nodes[i].nodeargd, "argnlist"):
                uwuify_nodes(
                    nodes[i].nodeargd.argnlist,
                    offsets,
                    mappings,
                    states,
                )

            if hasattr(nodes[i], "nodelist"):
                uwuify_nodes(
                    nodes[i].nodelist,
                    offsets,
                    mappings,
                    states,
                )

            if isinstance(nodes[i], LatexCharsNode):
                start = nodes[i].pos
                end = start + nodes[i].len

                original = nodes[i].parsing_state.s[start:end]
                uwu = uwuify(original)
                diff = len(uwu) - len(original)

                offset = offsets[nodes[i].parsing_state.s]
                offsets[nodes[i].parsing_state.s] += diff

                start = nodes[i].pos + offset
                end = start + nodes[i].len

                index = mappings[nodes[i].parsing_state.s]
                before = states[index][:start]
                after = states[index][end:]
                states[index] = before + uwu + after

        i += skiptable(nodes[i])


def uwuify_file(path, redirect=False):
    if not redirect:
        with open(path, "r+") as file:
            offsets = {}
            mappings = {}
            states = []
            text = file.read()

            walker = LatexWalker(text)
            nodes, _, _ = walker.get_latex_nodes(pos=0)
            uwuify_nodes(nodes, offsets, mappings, states)

            file.truncate(0)
            file.seek(0, 0)

            for state in states:
                file.write(state)
    else:
        inpath = path
        outpath = f"{os.path.splitext(path)[0]}-uwufied.tex"
        with open(inpath, "r") as infile, open(outpath, "w") as outfile:
            offsets = {}
            mappings = {}
            states = []
            text = infile.read()

            walker = LatexWalker(text)
            nodes, _, _ = walker.get_latex_nodes(pos=0)
            uwuify_nodes(nodes, offsets, mappings, states)

            for state in states:
                outfile.write(state)


def uwuify_project(path):
    uwuified = f"{path}-uwuified"

    shutil.rmtree(uwuified, ignore_errors=True)
    shutil.copytree(path, uwuified, dirs_exist_ok=True)

    for file in glob.iglob(uwuified + "/**/*.tex", recursive=True):
        uwuify_file(file)


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=("A program to uwuify all your LaTeX files/projects.")
    )
    parser.add_argument(
        "projects", nargs="+", default=[],
        help="list of LaTeX files/projects to uwuify"
    )
    args = parser.parse_args()

    for project in args.projects:
        if os.path.isdir(project):
            uwuify_project(project)
        else:
            uwuify_file(project, redirect=True)


if __name__ == "__main__":
    main()
